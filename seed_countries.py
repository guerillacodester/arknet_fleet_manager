#!/usr/bin/env python3
"""
seed_countries.py
-----------------
Seeds the countries table interactively or programmatically,
and generates countries.sql alongside the source CSV.
"""

import sys
import signal
import os
import argparse
from colorama import Fore, Style, init
from load_config import load_config
from load_countries import load_countries
from db_management import DBConnection, table_exists, create_table, insert, update, select
from help_countries import get_help_text

init(autoreset=True)


def graceful_exit(sig, frame):
    print("\nExiting gracefully. Goodbye!")
    sys.exit(0)


# Handle Ctrl+C and Ctrl+X
signal.signal(signal.SIGINT, graceful_exit)   # Ctrl+C
signal.signal(signal.SIGTERM, graceful_exit)  # Ctrl+X


def write_countries_sql(countries, csv_path):
    """Generate countries.sql next to the loaded CSV file."""
    out_dir = os.path.dirname(csv_path)
    out_path = os.path.join(out_dir, "countries.sql")

    with open(out_path, "w", encoding="utf-8") as f:
        f.write("-- countries.sql\n")
        f.write("-- Auto-generated by seed_countries.py\n\n")
        f.write("CREATE TABLE IF NOT EXISTS countries (\n")
        f.write("    country_id uuid PRIMARY KEY DEFAULT gen_random_uuid(),\n")
        f.write("    iso_code   text NOT NULL UNIQUE,\n")
        f.write("    name       text NOT NULL,\n")
        f.write("    created_at timestamptz NOT NULL DEFAULT now()\n")
        f.write(");\n\n")

        f.write("INSERT INTO countries (country_id, iso_code, name) VALUES\n")

        rows = []
        for row in countries:
            iso = row["iso_code"].replace("'", "''")
            name = row["name"].replace("'", "''")
            rows.append(f"    (gen_random_uuid(), '{iso}', '{name}')")

        f.write(",\n".join(rows))
        f.write("\nON CONFLICT (iso_code) DO UPDATE SET name = EXCLUDED.name;\n")

    return out_path


def seed_countries(interactive: bool = True):
    """
    Seed the countries table.
    - interactive=True: prints help, prompts user, prints row-by-row feedback
    - interactive=False: runs silently, just returns summary dict
    Returns: dict with inserted/updated/skipped/sql_file
    """
    config = load_config()
    result = {"inserted": 0, "updated": 0, "skipped": 0, "sql_file": None}

    with DBConnection(config) as conn:
        if interactive:
            print(get_help_text())

        # Ensure table exists
        if not table_exists(conn, "countries"):
            if interactive:
                print("[INFO] Countries table not found, creating...")
            schema_sql = """
            CREATE TABLE countries (
                country_id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
                iso_code   text NOT NULL UNIQUE,
                name       text NOT NULL,
                created_at timestamptz NOT NULL DEFAULT now()
            );
            """
            create_table(conn, schema_sql)

        countries = load_countries(config["files"]["countries"])

        # Check if already populated
        existing = select(conn, "countries", "count(*) as count")[0]["count"]

        if interactive and existing > 0:
            choice = input("[?] Countries table already contains data. Update it? (Y/n, S=skip): ").strip().lower()
            if choice == "s":
                if interactive:
                    print("[INFO] Skipping seeding.")
                return result
            update_mode = (choice == "y")
        else:
            # Non-interactive mode: if table has data, update
            update_mode = existing > 0

        for row in countries:
            try:
                if update_mode:
                    update(conn, "countries", {"name": row["name"]}, {"iso_code": row["iso_code"]})
                    result["updated"] += 1
                    if interactive:
                        print(Fore.GREEN + f"[OK] Updated {row['name']} ({row['iso_code']})")
                else:
                    insert(conn, "countries", row, id_column="country_id")
                    result["inserted"] += 1
                    if interactive:
                        print(Fore.GREEN + f"[OK] Inserted {row['name']} ({row['iso_code']})")
            except Exception as e:
                result["skipped"] += 1
                if interactive:
                    print(Fore.RED + f"[X] Failed {row['name']} ({row['iso_code']}): {e}")

        # Write SQL file
        sql_path = write_countries_sql(countries, config["files"]["countries"])
        result["sql_file"] = sql_path

        if interactive:
            print(
                Style.BRIGHT
                + f"\nSummary: Inserted={result['inserted']}, Updated={result['updated']}, Skipped={result['skipped']}"
            )
            print(Fore.GREEN + f"[OK] Generated {sql_path}")

    return result


if __name__ == "__main__":
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("-h", "--help", action="store_true", help="Show help menu and exit")
    args = parser.parse_args()

    if args.help:
        print(get_help_text())
        sys.exit(0)

    summary = seed_countries(interactive=True)
    print(summary)  # Debug summary dict
